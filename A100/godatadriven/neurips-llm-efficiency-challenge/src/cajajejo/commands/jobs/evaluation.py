import logging
import pathlib as plb
import tempfile

import typer
import sh
import yaml

from cajajejo.config import EvaluationConfig
from cajajejo.utils import yaml_str_presenter
from .utils import (
    validate_config,
    parse_eval_job_and_write_to_file,
)

yaml.add_representer(str, yaml_str_presenter)
yaml.representer.SafeRepresenter.add_representer(str, yaml_str_presenter)

logger = logging.getLogger("cajajejo.commands.jobs.evaluation")


evaluation_cmd = typer.Typer(
    help="ü™ñ Commands for deploying evaluation jobs",
    no_args_is_help=True,
)


@evaluation_cmd.command(
    name="validate-job-config",
    help="‚úÖ Validate a evaluation job configuration file.",
    short_help="‚úÖ Validate a evaluation job configuration file.",
    no_args_is_help=True,
)
def _validate_config(
    path_to_config: str = typer.Argument(None, help="Path to a evaluation config file.")
):
    validate_config(path_to_config, EvaluationConfig)


@evaluation_cmd.command(
    name="parse-job",
    help="‚úç Parse a kubernetes evaluation job using the evaluation job config file.",
    short_help="‚úç Parse a kubernetes evaluation job using the evaluation job config file.",
    no_args_is_help=True,
)
def _parse_job(
    path_to_eval_config: str = typer.Argument(
        None, help="Path to a evaluation config file."
    ),
    path_to_inference_config: str = typer.Argument(
        None, help="Path to a inference config file."
    ),
    path_to_helm_config: str = typer.Argument(None, help="Path to a helm config file."),
    job_spec_output_path: str = typer.Argument(
        None, help="Path to which the job spec should be written."
    ),
    config_version: str = typer.Option(
        None,
        help="Version of the evaluation config file. This can be any string, for example a GIT commit hash.",
    ),
):
    parse_eval_job_and_write_to_file(
        path_to_eval_config=path_to_eval_config,
        path_to_inference_config=path_to_inference_config,
        path_to_helm_config=path_to_helm_config,
        job_spec_output_path=job_spec_output_path,
        config_version=config_version,
    )


@evaluation_cmd.command(
    name="submit-job",
    short_help="üôè Submit a kubernetes evaluation job.",
    help="""üôè Submit a kubernetes evaluation job. You must either pass a job spec
    (generated by `cajajejo jobs evaluation parse-job`) or an evaluation config file,
    a helm config path, and a job template path. This will generate the kubernetes
    job spec on the fly (optionally writing it to a location).""",
    no_args_is_help=True,
)
def _submit_job(
    path_to_eval_config: str = typer.Option(
        None, help="Path to a evaluation config file."
    ),
    path_to_inference_config: str = typer.Option(
        None, help="Path to a inference config file."
    ),
    path_to_helm_config: str = typer.Option(
        None,
        help="Path to a helm config file. Only required when not passing a parsed job spec.",
    ),
    job_spec_output_path: str = typer.Option(
        None, help="Path to which the job spec should be written. Can be omitted."
    ),
    job_spec_path: str = typer.Option(
        None,
        help="Path to the job spec to use. If not defined, you must use `job_template_path` to generate the job spec.",
    ),
    config_version: str = typer.Option(
        None,
        help="Version of the evaluation config file. This can be any string, for example a GIT commit hash.",
    ),
):
    if job_spec_path is None:
        if (
            path_to_eval_config is None
            or path_to_helm_config is None
            or path_to_inference_config is None
        ):
            raise ValueError(
                "You must either pass a job spec or an evaluation config file, a helm config path, and a job template path."
            )
    if job_spec_path is None:
        with tempfile.TemporaryDirectory() as tmpdir:
            if job_spec_output_path is None:
                job_spec_output_path = str(plb.Path(tmpdir) / "job_spec.yaml")
            parse_eval_job_and_write_to_file(
                path_to_eval_config=path_to_eval_config,
                path_to_inference_config=path_to_inference_config,
                path_to_helm_config=path_to_helm_config,
                job_spec_output_path=job_spec_output_path,
                config_version=config_version,
            )
            print(sh.kubectl.apply(["-f", job_spec_output_path]))
    else:
        print(sh.kubectl.apply(["-f", job_spec_path]))
    logger.info("üöÄ Job submitted.")
